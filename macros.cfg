[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}

    M117 Bed temp S{BED_TEMP} Extruder temp S{EXTRUDER_TEMP}

    M140 S{BED_TEMP}
    M104 S{EXTRUDER_TEMP}

    CG28 ;Home

    ;M420 S1; Enable mesh leveling
    ;BED_MESH_CALIBRATE ADAPTIVE=1

    M190 S{BED_TEMP} ; Wait for bed to reach temperature
    M109 S{EXTRUDER_TEMP} ; Set and wait for nozzle to reach temperature

    G92 E0 ; Reset Extruder

    ADAPTIVE_LINE_PURGE

    G1 Z2.0 F3000 ;Move Z Axis up
    G1 E0.0000 F1800 

[gcode_macro PRINT_END]
gcode:
    G91 ;Relative positioning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out
    G1 Z50 ;Raise Z more
    G92 E0 ; zero the extruder
    G90 ;Absolute positioning

    G0 X0 Y220          ; Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend        
    M140 S0 ;Turn-off bed

    M84 X Y E ;Disable all steppers but Z

    M300 ; beep

[gcode_macro PARK]
gcode:
    CG28
    G1 Z10            ;Raise Z
    G90               ;Absolute positioning

    G0 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y} F3600  ;Present print
    M106 S0           ;Turn-off fan
    M104 S0           ;Turn-off hotend        
    M140 S0           ;Turn-off bed

    M84 X Y E ;Disable all steppers but Z

# Cancel print macro
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  M400 ; wait for buffer to clear
  G92 E0 ; zero the extruder
  {% if printer[printer.toolhead.extruder].target > 220 %}
      G1 E-5.0 F3600 ; retract filament PETG
  {% else %}
      G1 E-1.0 F3600 ; retract filament PLA
  {% endif %}
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  G91 ; relative positioning
  G0 Z1.00 X20.0 Y20.0 F20000 ; move nozzle to remove stringing
  TURN_OFF_HEATERS
  M107 ; turn off fan
  G1 Z4 F3000 ; move nozzle up 2mm
  G90 ; absolute positioning
  G0 X0 Y220 F3600 ; park nozzle at rear

[gcode_macro _NOTIFY_FILAMENT_CHANGE]
gcode:
  RESPOND PREFIX=tgnotify_photo MSG="🖨️ Filament change needed!"

[gcode_macro M300]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
    {% set duration = params.P | default(100) | float %}
    {% set sleep = params.S | default(0) | float %}
    {% if client.beeper_enabled %}
        SET_PIN PIN=beeper VALUE=1
        G4 P{duration}
        SET_PIN PIN=beeper VALUE=0
        G4 P{sleep}
    {% endif %}

[gcode_macro _CHANGE_FILAMENT_BEEP]
gcode:
    M300 P1000 S1000
    M300 P1000 S1000
    M300 P1000 S1000

[pause_resume]

# Filament change
[gcode_macro M600]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
    SAVE_GCODE_STATE NAME=M600_state

    PAUSE

    _CHANGE_FILAMENT_BEEP
    _NOTIFY_FILAMENT_CHANGE

    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M0]
gcode:
    M600 {rawparams}

# Pause print macro
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.0
variable_restore_idle_timeout: 0
gcode:
  ##### get user parameters or use default #####
  {% set smart_park = params.SMART_PARK | default(1) | int %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set idle_timeout = client.idle_timeout | default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE | default(1) | int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}

  ; Park if homed
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
 
# Resume print macro
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move | default(velocity) %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}
  {% if printer.idle_timeout.state | upper == "IDLE" and last_extruder_temp.restore %}
    M109 S{last_extruder_temp.temp}
  {% endif %}
  _CLIENT_EXTRUDE
  RESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}

#[gcode_macro LINE_PURGE]
#gcode:
#    G92 E0                      ; Reset Extruder
#    G1 Z2 F3000                 ; Move Z Axis up little to prevent scratching of Heat Bed
#    G1 X1 Y20 Z0.4 F5000        ; Move to start position
#    G1 X1 Y145 Z0.4 E15 F1500   ; Draw the first line
#    G1 X1.3 Y145 Z0.4 F5000     ; Move to side a little
#    G1 X1.3 Y20 Z0.4 E30 F1500  ; Draw the second line
#    G92 E0                      ; Reset Extruder
#    G1 E-1 F1800                ; Retract a bit 
#    G0 Z2 F3000                 ; Move Z Axis up little to prevent scratching of Heat Bed
#    G1 E0 F1800                 ; Unretract/Reset Extruder

[gcode_macro ADAPTIVE_LINE_PURGE]
variable_purge_height: 0.8  # Z position of nozzle during purge, default is 0.8 mm.
variable_tip_distance: 4    # Distance in mm between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 10   # Distance the purge will be in front of the print area, default is 10 mm.
variable_purge_amount: 20   # Amount of filament in mm to be purged prior to printing.
variable_flow_rate: 12      # Flow rate of purge in mm3/s. Default is 12.
gcode:
    {% set travel_speed = printer.toolhead.max_velocity * 60 %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    {% set RETRACT = 'G10' if printer.firmware_retraction is defined else 'G1 E-0.5 F2100' %}
    {% set UNRETRACT = 'G11' if printer.firmware_retraction is defined else 'G1 E0.5 F2100' %}

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    ; Get all object points
    {% set x_min = (all_points | map(attribute=0) | min | default(0)) %}                                ; Object x min
    {% set x_max = (all_points | map(attribute=0) | max | default(0)) %}                                ; Object x max
    {% set y_min = (all_points | map(attribute=1) | min | default(0)) %}                                ; Object y min
    {% set y_max = (all_points | map(attribute=1) | max | default(0)) %}                                ; Object y max
    
    {% set x_center = ([((x_max + x_min) / 2) - (purge_amount / 2), 0] | max) %}                        ; Create center point of purge line relative to print on X axis
    {% set y_center = ([((y_max + y_min) / 2) - (purge_amount / 2), 0] | max) %}                        ; Create center point of purge line relative to print on Y axis

    {% set x_origin = ([x_min - purge_margin, 0] | max) %}                                              ; Add margin to x min, compare to 0, and choose the larger
    {% set y_origin = ([y_min - purge_margin, 0] | max) %}                                              ; Add margin to y min, compare to 0, and choose the larger

    CG28 ; conditional home
    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}
        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge. Set it to 5 or greater. Using regular purge.")}
        LINE_PURGE
    {% else %}
        SAVE_GCODE_STATE NAME=prepurge_state                                                    ; Create gcode state

        G92 E0                                                                                  ; Reset extruder
        G0 F{travel_speed}                                                                      ; Set travel speed
        G90                                                                                     ; Absolute positioning
        G0 X{x_center if y_origin > 0 else x_origin} Y{y_origin if y_origin > 0 else y_center}  ; Move to purge position
        G0 Z{purge_height}                                                                      ; Move to purge Z height
        M83                                                                                     ; Relative extrusion mode
        G1 E{tip_distance} F{purge_move_speed}                                                  ; Move filament tip

        {% if y_origin > 0 %}                                                                   ; If there's room on Y, purge along X axis in front of print area
            G1 X{x_center + purge_amount} E{purge_amount} F{purge_move_speed}                   ; Purge line
            {RETRACT}                                                                           ; Retract
            G0 X{x_center + purge_amount + 10} F{travel_speed}                                  ; Rapid move to break string
        {% else %}                                                                              ; If there's room on X, purge along Y axis to the left of print area
            G1 Y{y_center + purge_amount} E{purge_amount} F{purge_move_speed}                   ; Purge line
            {RETRACT}                                                                           ; Retract
            G0 Y{y_center + purge_amount + 10} F{travel_speed}                                  ; Rapid move to break string
        {% endif %}
        
        G0 Z{purge_height * 2} F{travel_speed}                                                  ; Z hop
        {UNRETRACT}                                                                             ; Unretract, Prepeare For Extrusion
        G92 E0                                                                                  ; Reset extruder distance
        #M82                                                                                     ; Absolute extrusion mode

        RESTORE_GCODE_STATE NAME=prepurge_state                                                 ; Restore gcode state
    {% endif %}

[gcode_macro NOZZLE_CHANGE]
gcode:
  {% set NOZZLE_DIAMETER = params.NOZZLE_DIAMETER|default(printer.save_variables.variables.nozzle_diameter)|float %}
  CG28
  G90
  G1 X110 Y110 Z50 F3000
  SAVE_VARIABLE VARIABLE=nozzle_diameter VALUE='{NOZZLE_DIAMETER}'
  M109 S220

# Conditional home. Don't home if not needed
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro LOAD_FILAMENT]
variable_load_distance = 40     # Distance to load filament into the extruder
variable_purge_distance = 30    # Distance to purge filament after loading
gcode:
    {% set load_speed = params.LOAD_SPEED | default(500) | float %}
    {% set purge_speed = params.PURGE_SPEED | default(300) | float %}
    {% set min_temp = params.MIN_TEMP | default(220) | float %}
    {% set turn_off_extruder = params.TURN_OFF_EXTRUDER | default(0) | int %}  ; Turn off extruder after loading (0/1)
    
    SAVE_GCODE_STATE NAME=load_state    ; Create gcode state
    RESPOND TYPE=command MSG="action:ks_show spoolman" ; show prompt on klipper-screen

    # Heat extruder to the minimum required temperature if necessary
    {% if printer.extruder.temperature < min_temp %}
        M109 S{min_temp} ; Set extruder temp and wait
    {% endif %}


    G91                                 ; Relative positioning
    G92 E0                              ; Reset extruder
    G1 E{load_distance} F{load_speed}   ; Load filament quickly
    G1 E{purge_distance} F{purge_speed} ; Purge filament

    # Optionally turn off the extruder heater after loading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    RESTORE_GCODE_STATE NAME=load_state ; Restore gcode state
    M118 Filament Loaded                ; Notify completion
    M300

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance: 80    # Distance to retract filament from the extruder
variable_purge_distance: 20     # Distance to purge filament before unloading
gcode:
    {% set unload_speed = params.UNLOAD_SPEED | default(1500) | float %}
    {% set purge_speed = params.PURGE_SPEED | default(300) | float %}
    {% set min_temp = params.MIN_TEMP | default(220) | float %}
    {% set turn_off_extruder = params.TURN_OFF_EXTRUDER | default(0) | int %}  ; Turn off extruder after unloading (0/1)

    SAVE_GCODE_STATE NAME=unload_state ; Save current printer state

    # Heat extruder to the minimum required temperature if necessary
    {% if printer.extruder.temperature < min_temp %}
        M109 S{min_temp} ; Set extruder temp and wait
    {% endif %}

    G91                                     ; Enable relative positioning
    G92 E0                                  ; Reset extruder position
    G1 E{purge_distance} F{purge_speed}     ; Purge filament
    G1 E-{unload_distance} F{unload_speed}  ; Unload filament

    # Optionally turn off the extruder heater after unloading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    CLEAR_ACTIVE_SPOOL

    RESTORE_GCODE_STATE NAME=unload_state   ; Restore saved printer state
    M300 ; beep
  
[gcode_macro OFF]
gcode:
    M84                 ; Turn steppers off
    TURN_OFF_HEATERS    ; Turn bed_temp / hotend off
    M107                ; Turn print cooling fan off

[gcode_macro PID_EXTRUDER]
gcode:
  {% set target = params.TARGET | default(220) | float %}
  PID_CALIBRATE HEATER=extruder TARGET={target}
  SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
  {% set target = params.TARGET | default(60) | float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={target}
  SAVE_CONFIG

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x | default(0.0) %}
  {% set custom_park_y  = client.custom_park_y | default(0.0) %}
  {% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
  {% set sp_hop         = client.speed_hop | default(15) * 60 %}
  {% set sp_move        = client.speed_move | default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z | default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN | default(0) | float %}
  {% set z_park = [[(act.z + park_dz), z_min] | max, (max.z - origin.z)] | min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}

#####################################################################
#   Klipper G-Code Overrides
#####################################################################

[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S | float %}
    
    M104 {% for p in params %} {'%s%s' % (p, params[p])} {% endfor %}   ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}      ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set s = params.S | float %}

    M140 {% for p in params %} {'%s%s' % (p, params[p])} {% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}    ; Wait for bed temp (within 1 degree)
    {% endif %}

